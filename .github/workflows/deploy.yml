name: Deploy React + Spring Boot App

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKER_REGISTRY: ${{ github.repository }}
      IMAGE_NAME_FRONT: ${{ github.repository }}-frontend
      IMAGE_NAME_BACK: ${{ github.repository }}-backend

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    # 1. 로그인 
    - name: docker hub login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        
    # 2. React(vite) 프론트 Docker 이미지 빌드 & 푸시
    - name: Build & Push React Frontend Image
      run: |
        docker build -t $DOCKER_REGISTRY/${IMAGE_NAME_FRONT}:latest ./react-spring-boot/add-app/frontend
        docker push $DOCKER_REGISTRY/${IMAGE_NAME_FRONT}:latest

    # 3. Spring Boot 백엔드 Docker 이미지 빌드 & 푸시
    - name: gradlew 실행권한 설정 
      run: chmod +x gradlew
      
    - name: test gradlew 
      run: ./gradlew --info test
      
    - name: Build & Push Spring Boot Backend Image
      run: |
        cd ./react-spring-boot/add-app/backend/ 
        ./gradlew bootBuildImage --imageName=$DOCKER_REGISTRY/${IMAGE_NAME_BACK}:latest   
        docker push $DOCKER_REGISTRY/${IMAGE_NAME_BACK}:latest

  # 4. 원격 서버로 배포 (옵션)
  deploy:
      needs: build
      runs-on: [ self-hosted, kosa-host ]
      steps:
      - name: 운영서버에서 docker hub에 로그인 
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
  
      - name: docker-compose에서 이미지 다운로드 및 실행 
        run: |
          docker pull $DOCKER_REGISTRY/${IMAGE_NAME_FRONT}:latest
          docker pull $DOCKER_REGISTRY/${IMAGE_NAME_BACK}:latest
          cd /home/${{ secrets.REMOTE_USER }}/add-app
          docker compose up -d
